% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/release.R
\name{merge_release}
\alias{merge_release}
\title{Merge staged GitHub release}
\usage{
merge_release(pkg = ".", filename = "NEWS.md", host = NULL)
}
\arguments{
\item{pkg}{path to package. Currently, only \code{pkg = "."} is supported.}

\item{filename}{name of file containing release notes, defaults to \code{NEWS.md}.}

\item{host}{GitHub host to target, passed to the \code{.api_url} argument of
\code{\link[gh:gh]{gh::gh()}}. If unspecified, gh defaults to "https://api.github.com",
although gh's default can be customised by setting the GITHUB_API_URL
environment variable.

For a hypothetical GitHub Enterprise instance, either
"https://github.acme.com/api/v3" or "https://github.acme.com" is
acceptable.}
}
\value{
list containing results of pull request merge and GitHub release, invisibly
}
\description{
Merge a pull request staged with \code{\link[=stage_release]{stage_release()}} and create a new release on GitHub.
}
\details{
Manually verify that all status checks have completed before running \code{merge_release()}.

When run, \code{merge_release()}:
\enumerate{
\item Determines the staged release title from \code{NEWS.md} using \code{\link[=get_release]{get_release()}}
\item Selects the GitHub pull request that matches the staged release title, stops if there is more
or less than one matching PR
\item Verifies the staged pull request is ready to be merged by checking the locked, draft,
mergeable, and rebaseable flags
\item Merges the pull request into the default branch using "Rebase and merge"
}
}
